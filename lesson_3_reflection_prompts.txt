Adding a change here so I can figure out how to update github back to match git.  so this is the BROKEN page.

When would you want to use a remote repository 
rather than keeping all your work local?

I like the remote possibility because I use different 
computers during the day.  Using a remote repository 
keeps all of my files in easy access.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date 
with your remote repository?

For the same reason we want to manually update our other files.  It gives us more control of when other people can see the changes.  We don't want to publish our work if it isn't ready yet.

Describe the differences between forks, clones, and branches. When would you use one instead of another?

If I want to help Becca with her Set Game project, I go to her github.  There I fork her Set Game.  
It shows up in my GitHub.  To work on the code, I want to clone it onto my local computer.  After making changes, I 
can push it back to my GitHub.  I would use a branch to try something different before committing it into the main project.

What is the benefit of having a copy of the last known state of the remote stored locally?

People can work on GitHub.  No one can work on my local directory.  I have more control there.  
If something gets messed up on GitHub, I still have a last known state of the remote stored locally.
Smart!

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

To help Becca with a project, I would like her to put her project on her local computer with Git, 
then add it to GitHub so that I can see it.  I would fork it and pull it into my local Git, where I could work on 
it by creating a new branch.  When I think I have a good solution, I would push it to GitHub and make a pull request
for Becca to check it out.  If she is interested, she could then merge it into her master file.

When would you want to make changes in a separate branch rather than directly in master? 
What benefits does each approach have?
When I possibly want to make a change without killing the application at present, I can create a branch to 
try it out first.  I can then have another look at it.  If we like it, I can merge it into the master and 
delete the trial branch.  Working directly in the master, however, will be less complicated.

